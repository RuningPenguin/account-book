// 本文件用于，使用JQL语法操作项目关联的uniCloud空间的数据库，方便开发调试和远程数据库管理
// 编写clientDB的js API（也支持常规js语法，比如var），可以对云数据库进行增删改查操作。不支持uniCloud-db组件写法
// 可以全部运行，也可以选中部分代码运行。点击工具栏上的运行按钮或者按下【F5】键运行代码
// 如果文档中存在多条JQL语句，只有最后一条语句生效
// 如果混写了普通js，最后一条语句需是数据库操作语句
// 此处代码运行不受DB Schema的权限控制，移植代码到实际业务中注意在schema中配好permission
// 不支持clientDB的action
// 数据库查询有最大返回条数限制，详见：https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#limit
// 详细JQL语法，请参考：https://uniapp.dcloud.net.cn/uniCloud/jql.html

// 获取时间区间
function createTimeSection() {
  const prev = Date.parse(`${new Date().getFullYear()}-${new Date().getMonth() + 1}-01 00:00:00`);
  const next = Date.parse(`$${new Date().getFullYear()}-${new Date().getMonth() + 2}-01 00:00:00`);
  return [Number(prev), Number(next)]
}

const [prev, next] = createTimeSection();

const User = db.collection('uni-id-users')
  .where({ _id: "63e21fb4f5cf3a42a27f13c0" })
  .field("_id,last_login_date,last_login_ip,nickname,register_date,avatar_file")
  .getTemp();

const Budget = db.collection("qie-budget")
  .where({ budget_type: "all" })
  .field('create_date,money,uid')
  .getTemp()

db.collection(User, Budget)
  .where(`_id["qie-budget"].create_date >= ${prev} && _id["qie-budget"].create_date < ${next}`)
  .field(
    'last_login_date,last_login_ip,nickname,register_date,avatar_file.url as avatar_file_url,_id["qie-budget"].money as budget'
  )

  .get()
